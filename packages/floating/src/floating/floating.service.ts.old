import { ComponentType } from "@angular/cdk/portal"
import { ElementRef, inject, Injectable } from "@angular/core"

import { Observable, share, Subscriber } from "rxjs"

import { AlignmentInput, SidesInput } from "@ngutil/style"

import { type FloatingBehavior } from "../behavior/behavior"
import { type ContainerOptions } from "../layer/container-ref"
import { LayerService } from "../layer/layer.service"
import { type FloatingChannel, FloatingRef } from "./floating-ref"

export interface FloatingAlign {
    align?: AlignmentInput
}

export interface FloatingAnchorPosition extends FloatingAlign {
    margin?: SidesInput
}

export interface FloatingAnchor extends FloatingAnchorPosition {
    ref: Node | "layer" | "viewport"
}

export class FloatingAnchorRef<T extends Node> extends ElementRef<T> {}

export interface FloatingContentPosition extends FloatingAlign {
    margin?: SidesInput
}

export interface FloatingPlacementPosition {
    padding?: SidesInput
}

export interface FloatingPlacement extends FloatingPlacementPosition {}

export class FloatingPlacementRef<T extends LayerService["root"]["nativeElement"]> extends ElementRef<T> {}

export interface FloatingOptions extends ContainerOptions {
    anchor?: FloatingAnchor
    content?: FloatingContentPosition
    placement?: FloatingPlacement
}

export interface ComponentOptions extends FloatingOptions {}

/**
 * @example
 * ```typesript
 * @Component({
 *   providers: [FloatingService],
 * })
 * export class MyComponent {
 *  readonly #floating = inject(FloatingService)
 *  showDialog() {
 *    this.#floating.showComponent(SomeComponent, ...)
 *  }
 * }
 * ```
 */
@Injectable()
export class FloatingService {
    readonly layer = inject(LayerService)
    readonly parent = inject(FloatingRef, { skipSelf: true, optional: true })

    showComponent<C extends FloatingChannel, CT>(
        component: ComponentType<CT>,
        behavior: FloatingBehavior,
        opts: ComponentOptions
    ): Observable<C> {
        return new Observable((dest: Subscriber<C>) => {
            const container = this.layer.newComponentPortal({ component })

            const floatingRef = new FloatingRef<C>(null as any, container)
            const behaviorS = floatingRef.channel.subscribe(event => {
                dest.next(event)
                if (event.type === "disposed") {
                    dest.complete()
                }
            })
            return () => {
                behaviorS.unsubscribe()
            }
        }).pipe(share())
    }

    // showTemplate(tpl, behavior, opts) {}
}
